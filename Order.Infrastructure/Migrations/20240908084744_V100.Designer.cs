// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Order.Infrastructure;

#nullable disable

namespace Order.Infrastructure.Migrations
{
    [DbContext(typeof(OrderDbContext))]
    [Migration("20240908084744_V100")]
    partial class V100
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.7.24405.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.InboxState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Consumed")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ConsumerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReceiveCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Received")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasAlternateKey("MessageId", "ConsumerId");

                    b.HasIndex("Delivered");

                    b.ToTable("InboxState");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", b =>
                {
                    b.Property<long>("SequenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SequenceNumber"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DestinationAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("EnqueueTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FaultAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Headers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InboxConsumerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InboxMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InitiatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OutboxId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResponseAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SourceAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("SequenceNumber");

                    b.HasIndex("EnqueueTime");

                    b.HasIndex("ExpirationTime");

                    b.HasIndex("OutboxId", "SequenceNumber")
                        .IsUnique()
                        .HasFilter("[OutboxId] IS NOT NULL");

                    b.HasIndex("InboxMessageId", "InboxConsumerId", "SequenceNumber")
                        .IsUnique()
                        .HasFilter("[InboxMessageId] IS NOT NULL AND [InboxConsumerId] IS NOT NULL");

                    b.ToTable("OutboxMessage");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxState", b =>
                {
                    b.Property<Guid>("OutboxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("OutboxId");

                    b.HasIndex("Created");

                    b.ToTable("OutboxState");
                });

            modelBuilder.Entity("Order.Domain.Aggregates.BuyerAggregate.Buyer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuyerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("OrderingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderingId")
                        .IsUnique();

                    b.ToTable("Buyers");
                });

            modelBuilder.Entity("Order.Domain.Aggregates.MechanicAggregate.Mechanic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MechanicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("OrderingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Performance")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("OrderingId")
                        .IsUnique();

                    b.ToTable("Mechanics");
                });

            modelBuilder.Entity("Order.Domain.Aggregates.OrderAggregate.Cancellation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Cancellations");
                });

            modelBuilder.Entity("Order.Domain.Aggregates.OrderAggregate.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CouponValueType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Percentage")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("OrderingId")
                        .IsUnique();

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("Order.Domain.Aggregates.OrderAggregate.Fee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FeeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Percentage")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("PercentageOrValueType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderingId");

                    b.ToTable("Fees");
                });

            modelBuilder.Entity("Order.Domain.Aggregates.OrderAggregate.Fleet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("OrderingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderingId");

                    b.ToTable("Fleets");
                });

            modelBuilder.Entity("Order.Domain.Aggregates.OrderAggregate.LineItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("OrderingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderingId");

                    b.ToTable("LineItems");
                });

            modelBuilder.Entity("Order.Domain.Aggregates.OrderAggregate.Ordering", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BaseCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CancellationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsScheduled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MechanicWaitingAcceptTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RatingImages")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("ScheduledOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalCanceledByMechanic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CancellationId");

                    b.ToTable("Orderings");
                });

            modelBuilder.Entity("Order.Domain.Aggregates.OrderAggregate.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankReference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("TransactionAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderingId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Order.Domain.Aggregates.BuyerAggregate.Buyer", b =>
                {
                    b.HasOne("Order.Domain.Aggregates.OrderAggregate.Ordering", "Ordering")
                        .WithOne("Buyer")
                        .HasForeignKey("Order.Domain.Aggregates.BuyerAggregate.Buyer", "OrderingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ordering");
                });

            modelBuilder.Entity("Order.Domain.Aggregates.MechanicAggregate.Mechanic", b =>
                {
                    b.HasOne("Order.Domain.Aggregates.OrderAggregate.Ordering", "Ordering")
                        .WithOne("Mechanic")
                        .HasForeignKey("Order.Domain.Aggregates.MechanicAggregate.Mechanic", "OrderingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Order.Domain.ValueObjects.Rating", "Rating", b1 =>
                        {
                            b1.Property<Guid>("MechanicId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Comment")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<decimal>("Value")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)");

                            b1.HasKey("MechanicId");

                            b1.ToTable("Mechanics");

                            b1.WithOwner()
                                .HasForeignKey("MechanicId");
                        });

                    b.Navigation("Ordering");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("Order.Domain.Aggregates.OrderAggregate.Cancellation", b =>
                {
                    b.OwnsOne("Order.Domain.ValueObjects.Money", "CancellationRefund", b1 =>
                        {
                            b1.Property<Guid>("CancellationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CancellationId");

                            b1.ToTable("Cancellations");

                            b1.WithOwner()
                                .HasForeignKey("CancellationId");
                        });

                    b.Navigation("CancellationRefund");
                });

            modelBuilder.Entity("Order.Domain.Aggregates.OrderAggregate.Coupon", b =>
                {
                    b.HasOne("Order.Domain.Aggregates.OrderAggregate.Ordering", null)
                        .WithOne("Coupon")
                        .HasForeignKey("Order.Domain.Aggregates.OrderAggregate.Coupon", "OrderingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Order.Domain.ValueObjects.Money", "DiscountAmount", b1 =>
                        {
                            b1.Property<Guid>("CouponId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CouponId");

                            b1.ToTable("Coupons");

                            b1.WithOwner()
                                .HasForeignKey("CouponId");
                        });

                    b.OwnsOne("Order.Domain.ValueObjects.Money", "MinimumOrderValue", b1 =>
                        {
                            b1.Property<Guid>("CouponId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CouponId");

                            b1.ToTable("Coupons");

                            b1.WithOwner()
                                .HasForeignKey("CouponId");
                        });

                    b.OwnsOne("Order.Domain.ValueObjects.Money", "Value", b1 =>
                        {
                            b1.Property<Guid>("CouponId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CouponId");

                            b1.ToTable("Coupons");

                            b1.WithOwner()
                                .HasForeignKey("CouponId");
                        });

                    b.Navigation("DiscountAmount")
                        .IsRequired();

                    b.Navigation("MinimumOrderValue")
                        .IsRequired();

                    b.Navigation("Value");
                });

            modelBuilder.Entity("Order.Domain.Aggregates.OrderAggregate.Fee", b =>
                {
                    b.HasOne("Order.Domain.Aggregates.OrderAggregate.Cancellation", null)
                        .WithMany("CancellationCharges")
                        .HasForeignKey("OrderingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Order.Domain.Aggregates.OrderAggregate.Ordering", null)
                        .WithMany("Fees")
                        .HasForeignKey("OrderingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Order.Domain.ValueObjects.Money", "Amount", b1 =>
                        {
                            b1.Property<Guid>("FeeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("FeeId");

                            b1.ToTable("Fees");

                            b1.WithOwner()
                                .HasForeignKey("FeeId");
                        });

                    b.OwnsOne("Order.Domain.ValueObjects.Money", "FeeAmount", b1 =>
                        {
                            b1.Property<Guid>("FeeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("FeeId");

                            b1.ToTable("Fees");

                            b1.WithOwner()
                                .HasForeignKey("FeeId");
                        });

                    b.Navigation("Amount");

                    b.Navigation("FeeAmount")
                        .IsRequired();
                });

            modelBuilder.Entity("Order.Domain.Aggregates.OrderAggregate.Fleet", b =>
                {
                    b.HasOne("Order.Domain.Aggregates.OrderAggregate.Ordering", null)
                        .WithMany("Fleets")
                        .HasForeignKey("OrderingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Order.Domain.Aggregates.OrderAggregate.LineItem", b =>
                {
                    b.HasOne("Order.Domain.Aggregates.OrderAggregate.Ordering", null)
                        .WithMany("LineItems")
                        .HasForeignKey("OrderingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Order.Domain.ValueObjects.Money", "BaseUnitPrice", b1 =>
                        {
                            b1.Property<Guid>("LineItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("LineItemId");

                            b1.ToTable("LineItems");

                            b1.WithOwner()
                                .HasForeignKey("LineItemId");
                        });

                    b.OwnsOne("Order.Domain.ValueObjects.Money", "SubTotal", b1 =>
                        {
                            b1.Property<Guid>("LineItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("LineItemId");

                            b1.ToTable("LineItems");

                            b1.WithOwner()
                                .HasForeignKey("LineItemId");
                        });

                    b.OwnsOne("Order.Domain.ValueObjects.Money", "UnitPrice", b1 =>
                        {
                            b1.Property<Guid>("LineItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("LineItemId");

                            b1.ToTable("LineItems");

                            b1.WithOwner()
                                .HasForeignKey("LineItemId");
                        });

                    b.OwnsOne("Order.Domain.ValueObjects.Tax", "Tax", b1 =>
                        {
                            b1.Property<Guid>("LineItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Rate")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)");

                            b1.HasKey("LineItemId");

                            b1.ToTable("LineItems");

                            b1.WithOwner()
                                .HasForeignKey("LineItemId");

                            b1.OwnsOne("Order.Domain.ValueObjects.Money", "TaxAmount", b2 =>
                                {
                                    b2.Property<Guid>("TaxLineItemId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<decimal>("Amount")
                                        .HasPrecision(18, 4)
                                        .HasColumnType("decimal(18,4)");

                                    b2.Property<string>("Currency")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("TaxLineItemId");

                                    b2.ToTable("LineItems");

                                    b2.WithOwner()
                                        .HasForeignKey("TaxLineItemId");
                                });

                            b1.Navigation("TaxAmount")
                                .IsRequired();
                        });

                    b.Navigation("BaseUnitPrice")
                        .IsRequired();

                    b.Navigation("SubTotal")
                        .IsRequired();

                    b.Navigation("Tax");

                    b.Navigation("UnitPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Order.Domain.Aggregates.OrderAggregate.Ordering", b =>
                {
                    b.HasOne("Order.Domain.Aggregates.OrderAggregate.Cancellation", "Cancellation")
                        .WithMany()
                        .HasForeignKey("CancellationId");

                    b.OwnsOne("Order.Domain.ValueObjects.Money", "GrandTotal", b1 =>
                        {
                            b1.Property<Guid>("OrderingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderingId");

                            b1.ToTable("Orderings");

                            b1.WithOwner()
                                .HasForeignKey("OrderingId");
                        });

                    b.OwnsOne("Order.Domain.ValueObjects.Money", "OrderAmount", b1 =>
                        {
                            b1.Property<Guid>("OrderingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderingId");

                            b1.ToTable("Orderings");

                            b1.WithOwner()
                                .HasForeignKey("OrderingId");
                        });

                    b.OwnsOne("Order.Domain.ValueObjects.Rating", "Rating", b1 =>
                        {
                            b1.Property<Guid>("OrderingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Comment")
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)");

                            b1.Property<decimal>("Value")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)");

                            b1.HasKey("OrderingId");

                            b1.ToTable("Orderings");

                            b1.WithOwner()
                                .HasForeignKey("OrderingId");
                        });

                    b.OwnsOne("Order.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("OrderingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AddressLine")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("OrderingId");

                            b1.ToTable("Orderings");

                            b1.WithOwner()
                                .HasForeignKey("OrderingId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Cancellation");

                    b.Navigation("GrandTotal")
                        .IsRequired();

                    b.Navigation("OrderAmount")
                        .IsRequired();

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("Order.Domain.Aggregates.OrderAggregate.Payment", b =>
                {
                    b.HasOne("Order.Domain.Aggregates.OrderAggregate.Ordering", "Ordering")
                        .WithOne("Payment")
                        .HasForeignKey("Order.Domain.Aggregates.OrderAggregate.Payment", "OrderingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Order.Domain.ValueObjects.Money", "Amount", b1 =>
                        {
                            b1.Property<Guid>("PaymentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PaymentId");

                            b1.ToTable("Payments");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("Ordering");
                });

            modelBuilder.Entity("Order.Domain.Aggregates.OrderAggregate.Cancellation", b =>
                {
                    b.Navigation("CancellationCharges");
                });

            modelBuilder.Entity("Order.Domain.Aggregates.OrderAggregate.Ordering", b =>
                {
                    b.Navigation("Buyer")
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Fees");

                    b.Navigation("Fleets");

                    b.Navigation("LineItems");

                    b.Navigation("Mechanic");

                    b.Navigation("Payment");
                });
#pragma warning restore 612, 618
        }
    }
}
